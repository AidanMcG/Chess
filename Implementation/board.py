from pieces import Piece 
from individual_pieces import *

class Board:
    def __init__(self):
        self.board = {
                (1,1): Castle("white", (1,1), "castle"),
                (2,1): Knight("white", (2,1), "knight"),
                (3,1): Queen("white", (3,1), "queen"),
                (4,1): Knight("white", (4,1), "knight"),
                (5,1): Castle("white", (5,1), "castle"), 
                (6,1): Bishop("white", (6,1), "bishop"),
                (7,1): Bishop("white", (7,1), "bishop"), 
                (8,1): Knight("white", (8,1), "knight"),
                (9,1): Knight("white", (9,2), "knight"),    
                (10,): Bishop("white", (10,1), "bishop"),
                (11,1): Bishop("white", (11,1), "bishop"),
                (12,1): Castle("white", (12,1), "castle"),
                (13,1): Knight("white", (13,1), "knight"),
                (14,1): King("white", (14,1), "king"),    
                (15,1): Knight("white", (15,1), "knight"), 
                (16,1): Castle("white", (16,1), "castle"),
                (1,2): Pawn("white", (1,2), "pawn"),    
                (2,2): Pawn("white", (2,2), "pawn"),
                (3,2): Pawn("white", (3,2), "pawn"),
                (4,2): Pawn("white", (4,2), "pawn"),
                (5,2): Pawn("white", (5,2), "pawn"),
                (6,2): Pawn("white", (6,2), "pawn"),    
                (7,2): Pawn("white", (7,2), "pawn"), 
                (8,2): Pawn("white", (8,2), "pawn"),
                (9,2): Pawn("white", (9,2), "pawn"),    
                (10,2): Pawn("white", (10,2), "pawn"),
                (11,2): Pawn("white", (11,2), "pawn"),
                (12,2): Pawn("white", (12,2), "pawn"),
                (13,2): Pawn("white", (13,2), "pawn"),
                (14,2): Pawn("white", (14,2), "pawn"),    
                (15,2): Pawn("white", (15,2), "pawn"), 
                (16,2): Pawn("white", (16,2), "pawn"),
                (1,3): None,    
                (2,3): Pawn("white", (2,3), "pawn"),
                (3,3): Pawn("white", (3,3), "pawn"),
                (4,3): Pawn("white", (4,3), "pawn"),
                (5,3): None,
                (6,3): None,
                (7,3): None, 
                (8,3): Pawn("white", (8,3), "pawn"),
                (9,3): Pawn("white", (9,3), "pawn"),   
                (10,3): None,
                (11,3): None,
                (12,3): None,
                (13,3): Pawn("white", (13,3), "pawn"),
                (14,3): Pawn("white", (14,3), "pawn"),
                (15,3): Pawn("white", (15,3), "pawn"), 
                (16,3): None,
                (1,4): None,    
                (2,4): None,
                (3,4): None,
                (4,4): None,
                (5,4): None,
                (6,4): None,
                (7,4): None,
                (8,4): None,
                (9,4): None,
                (10,4): None,    
                (11,4): None,
                (12,4): None,
                (13,4): None,
                (14,4): None,
                (15,4): None,
                (16,4): None,
                (1,5): None,    
                (2,5): None,
                (3,5): None,
                (4,5): None,
                (5,5): None,
                (6,5): None,
                (7,5): None, 
                (8,5): None,
                (9,5): None,    
                (10,5): None,
                (11,5): None,
                (12,5): None,
                (13,5): None,
                (14,5): None,
                (15,5): None, 
                (16,5): None,
                (1,6): None,    
                (2,6): None,
                (3,6): None,
                (4,6): None,
                (5,6): None,
                (6,6): None,
                (7,6): None, 
                (8,6): None,
                (9,6): None,    
                (10,6): None,
                (11,6): None,
                (12,6): None,
                (13,6): None,
                (14,6): None,
                (15,6): None, 
                (16,6): None,
                (1,7): None,    
                (2,7): None,
                (3,7): None,
                (4,7): None,
                (5,7): None,
                (6,7): None,
                (7,7): None, 
                (8,7): None,
                (9,7): None,    
                (10,7): None,
                (11,7): None,
                (12,7): None,
                (13,7): None,
                (14,7): None,
                (15,7): None, 
                (16,7): None,
                (1,8): None,    
                (2,8): None,
                (3,8): None,
                (4,8): None,
                (5,8): None,
                (6,8): None,
                (7,8): None, 
                (8,8): None,
                (9,8): None,    
                (10,8): None,
                (11,8): None,
                (12,8): None,
                (13,8): None,
                (14,8): None,
                (15,8): None, 
                (16,8): None,
                (1,9): None,    
                (2,9): None,
                (3,9): None,
                (4,9): None,
                (5,9): None,
                (6,9): None,
                (7,9): None, 
                (8,9): None,
                (9,9): None,    
                (10,9): None,
                (11,9): None,
                (12,9): None,
                (13,9): None,
                (14,9): None,
                (15,9): None, 
                (16,9): None,
                (1,10): None,    
                (2,10): None,
                (3,10): None,
                (4,10): None,
                (5,10): None,
                (6,10): None,
                (7,10): None, 
                (8,10): None,
                (9,10): None,    
                (10,10): None,
                (11,10): None,
                (12,10): None,
                (13,10): None,
                (14,10): None,
                (15,10): None, 
                (16,10): None,
                (1,11): None,    
                (2,11): None,
                (3,11): None,
                (4,11): None,
                (5,11): None,
                (6,11): None,
                (7,11): None, 
                (8,11): None,
                (9,11): None,    
                (10,11): None,
                (11,11): None,
                (12,11): None,
                (13,11): None,
                (14,11): None,
                (15,11): None, 
                (16,11): None,
                (1,12): None,    
                (2,12): None,
                (3,12): None,
                (4,12): None,
                (5,12): None,
                (6,12): None,
                (7,12): None, 
                (8,12): None,
                (9,12): None,    
                (10,12): None,
                (11,12): None,
                (12,12): None,
                (13,12): None,
                (14,12): None,
                (15,12): None, 
                (16,12): None,
                (1,13): None,    
                (2,13): None,
                (3,13): None,
                (4,13): None,
                (5,13): None,
                (6,13): None,
                (7,13): None, 
                (8,13): None,
                (9,13): None,    
                (10,13): None,
                (11,13): None,
                (12,13): None,
                (13,13): None,
                (14,13): None,
                (15,13): None, 
                (16,13): None,
                (1,14): None,    
                (2,14): Pawn("white", (2,14), "pawn"),
                (3,14): Pawn("white", (3,14), "pawn"),
                (4,14): Pawn("white", (4,14), "pawn"),
                (5,14): None,
                (6,14): None,
                (7,14): None, 
                (8,14): Pawn("white", (8,14), "pawn"),
                (9,14): Pawn("white", (9,14), "pawn"),   
                (10,14): None,
                (11,14): None,
                (12,14): None,
                (13,14): Pawn("black", (13,14), "pawn"),
                (14,14): Pawn("black", (14,14), "pawn"),
                (15,14): Pawn("black", (15,14), "pawn"), 
                (16,14): None,
                (1,15): Pawn("black", (1,15), "pawn"),    
                (2,15): Pawn("black", (2,15), "pawn"),
                (3,15): Pawn("black", (3,15), "pawn"),
                (4,15): Pawn("black", (4,15), "pawn"),
                (5,15): Pawn("black", (5,15), "pawn"),
                (6,15): Pawn("black", (6,15), "pawn"),    
                (7,15): Pawn("black", (7,15), "pawn"), 
                (8,15): Pawn("black", (8,15), "pawn"),
                (9,15): Pawn("black", (9,15), "pawn"),    
                (10,15): Pawn("black", (10,15), "pawn"),
                (11,15): Pawn("black", (11,15), "pawn"),
                (12,15): Pawn("black", (12,15), "pawn"),
                (13,15): Pawn("black", (13,15), "pawn"),
                (14,15): Pawn("black", (14,15), "pawn"),    
                (15,15): Pawn("black", (15,15), "pawn"), 
                (16,15): Pawn("black", (16,15), "pawn"),
                (1,16): Castle("black", (1,16), "castle"),
                (2,16): Knight("black", (2,16), "knight"),
                (3,16): Queen("black", (3,16), "queen"),
                (4,16): Knight("black", (4,16), "knight"),
                (5,16): Castle("black", (5,16), "castle"), 
                (6,16): Bishop("black", (6,16), "bishop"),
                (7,16): Bishop("black", (7,16), "bishop"), 
                (8,16): Knight("black", (8,16), "knight"),
                (9,16): Knight("black", (9,16), "knight"),    
                (10,16): Bishop("black", (10,16), "bishop"),
                (11,16): Bishop("black", (11,16), "bishop"),
                (12,16): Castle("black", (12,16), "castle"),
                (13,16): Knight("black", (13,16), "knight"),
                (14,16): King("black", (14,16), "king"),    
                (15,16): Knight("black", (15,16), "knight"), 
                (16,16): Castle("black", (16,16), "castle"),
                }
        
        
    def updateBoard(self,start, end):
        self.board.end = self.board.get(start)
        self.board.start = None
        
        
        ''''''
    
    def makeBoard():
        pass
        
        





def main():
	b = Board()
	print(b.board.get((1,1)).getPossibleMoves(b))



if __name__ == "__main__":
	main()